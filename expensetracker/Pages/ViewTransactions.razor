// Pages/ViewTransactions.razor
@page "/viewtransactions"
@inject IDataService DataService
@using expensetracker.Models
@inject NavigationManager Nav

<h3 class="text-center mb-4">Transaction History</h3>

<div class="container" style="max-width: 900px;">
    <div class="card p-4 mb-4">
        <div class="row">
            <div class="col-md-3">
                <label>Search</label>
                <input class="form-control" @bind="SearchTerm" />
            </div>
            <div class="col-md-3">
                <label>Type</label>
                <select class="form-control" @bind="SelectedType">
                    <option value="">All</option>
                    <option>Credit</option>
                    <option>Debit</option>
                    <option>Debt</option>
                </select>
            </div>
            <div class="col-md-3">
                <label>Tag</label>
                <input class="form-control" @bind="TagFilter" />
            </div>
            <div class="col-md-3">
                <label>Date Range</label>
                <div class="d-flex gap-1">
                    <input type="date" class="form-control" @bind="FromDate" />
                    <input type="date" class="form-control" @bind="ToDate" />
                </div>
            </div>
        </div>
    </div>

    <div class="card p-3 mb-4">
        <div class="row text-center">
            <div class="col"><strong>Total Inflow:</strong><br />@InflowTotal.ToString("C")</div>
            <div class="col"><strong>Total Outflow:</strong><br />@OutflowTotal.ToString("C")</div>
            <div class="col"><strong>Total Debt:</strong><br />@DebtTotal.ToString("C")</div>
            <div class="col"><strong>Net:</strong><br />(@InflowTotal - @OutflowTotal).ToString("C")</div>
        </div>
    </div>

    <table class="table table-bordered table-hover">
        <thead class="table-light">
            <tr>
                <th @onclick="() => SortByDate()">Date @if (SortDescending)
                    {
                        <span>↓</span>
                    }
                    else
                    {
                        <span>↑</span>
                    }</th>
                <th>Title</th>
                <th>Type</th>
                <th>Amount</th>
                <th>Tags</th>
                <th>Note</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in FilteredTransactions)
            {
                    <tr>
                        <td>@t.Date.ToShortDateString()</td>
                        <td>@t.Title</td>
                        <td>@t.Type</td>
                        <td>@t.Amount.ToString("C")</td>
                        <td>@string.Join(", ", t.Tags)</td>
                        <td>@t.Note</td>
                    </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Transaction> AllTransactions = new();
    private List<Transaction> FilteredTransactions => ApplyFilters();

    private string SearchTerm = string.Empty;
    private string SelectedType = string.Empty;
    private string TagFilter = string.Empty;
    private DateTime? FromDate = null;
    private DateTime? ToDate = null;

    private bool SortDescending = true;

    private decimal InflowTotal = 0;
    private decimal OutflowTotal = 0;
    private decimal DebtTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        var settings = await DataService.LoadUserSettingsAsync();
        if (settings == null) return;

        AllTransactions = (await DataService.LoadTransactionsAsync())
            .Where(t => t.Username == settings.Username)
            .ToList();

        CalculateTotals();
    }

    private List<Transaction> ApplyFilters()
    {
        var result = AllTransactions.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(SearchTerm))
            result = result.Where(t => t.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrWhiteSpace(SelectedType))
            result = result.Where(t => t.Type.ToString() == SelectedType);

        if (!string.IsNullOrWhiteSpace(TagFilter))
            result = result.Where(t => t.Tags.Any(tag => tag.Contains(TagFilter, StringComparison.OrdinalIgnoreCase)));

        if (FromDate.HasValue)
            result = result.Where(t => t.Date >= FromDate.Value);

        if (ToDate.HasValue)
            result = result.Where(t => t.Date <= ToDate.Value);

        result = SortDescending
            ? result.OrderByDescending(t => t.Date)
            : result.OrderBy(t => t.Date);

        return result.ToList();
    }

    private void SortByDate()
    {
        SortDescending = !SortDescending;
    }

    private void CalculateTotals()
    {
        InflowTotal = AllTransactions.Where(t => t.Type == TransactionType.Credit).Sum(t => t.Amount);
        OutflowTotal = AllTransactions.Where(t => t.Type == TransactionType.Debit).Sum(t => t.Amount);
        DebtTotal = AllTransactions.Where(t => t.Type == TransactionType.Debt).Sum(t => t.Amount);
    }
}
