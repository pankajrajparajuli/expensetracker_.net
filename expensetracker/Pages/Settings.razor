@page "/settings"
@inject IDataService DataService
@inject NavigationManager Nav
@using expensetracker.Models;
@using expensetracker.Services;

<h3>Settings</h3>

@if (User == null)
{
        <p>Loading...</p>
}
else
{
        <div class="form-group mb-3">
            <label>Username:</label>
            <input class="form-control" @bind="User.Username" disabled />
        </div>

        <div class="form-group mb-3">
            <label>Preferred Currency:</label>
            <input class="form-control" @bind="User.Currency" />
        </div>

        <div class="form-group mb-3">
            <label>Change Password:</label>
            <input type="password" class="form-control" @bind="NewPassword" />
        </div>

        <button class="btn btn-primary me-2" @onclick="UpdateSettings">Save Changes</button>
        <button class="btn btn-danger" @onclick="ResetApp">Reset All Data</button>

    @if (!string.IsNullOrWhiteSpace(Status))
    {
                <p class="mt-3 text-success">@Status</p>
    }
}

@code {
    private UserSettings? User;
    private string NewPassword = "";
    private string Status = "";

    protected override async Task OnInitializedAsync()
    {
        User = await DataService.LoadUserSettingsAsync();
    }

    private async Task UpdateSettings()
    {
        if (User == null) return;

        if (!string.IsNullOrWhiteSpace(NewPassword))
            User.Password = NewPassword;

        await DataService.SaveUserSettingsAsync(User);
        Status = "Settings updated successfully.";
    }

    private async Task ResetApp()
    {
        var settingsPath = Path.Combine(FileSystem.AppDataDirectory, "user_settings.json");
        var transactionsPath = Path.Combine(FileSystem.AppDataDirectory, "transactions.json");

        if (File.Exists(settingsPath)) File.Delete(settingsPath);
        if (File.Exists(transactionsPath)) File.Delete(transactionsPath);

        Nav.NavigateTo("/signup", forceLoad: true);
    }
}
